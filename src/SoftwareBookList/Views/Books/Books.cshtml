@using SoftwareBookList.Models;
@model BookPaginatedList<Book>;

@{
    Layout = "_Layout";
}

<div class="container">
    <table class="table border border-2 border-dark">
        <thead>
            <tr>
                <th scope="col">Rank</th>
                <th scope="col">Title</th>
                <th scope="col">Score</th>
                <th scope="col">Your Score</th>
                <th scope="col">Your Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in Model.Books)
            {
                <tr>
                    <td>Rank # Here</td>
                    <td>
                        <a href="@Url.Action("BookDetails", new { googleID = book.GoogleID })">
                            <img src="@book.Thumbnail" alt="Thumbnail" />
                            @book.Title
                        </a>
                    </td>
                    <td>Score Here</td>
                    <td>User's Score Here</td>
                    <td>
                        @if (!User.Identity.IsAuthenticated)
                        {
                            <a href="@Url.Action("Login", "Account", new { ReturnUrl = Url.Action("Books", "Books") })" class="btn btn-primary">Login To Add Books</a>
                        }
                        else
                        {
                            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addBookModal-@book.BookID">
                                Add Book
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav aria-label="Page navigation">
        <ul class="pagination">
            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Books", new { page = Model.PageIndex - 1 })">Previous</a>
                </li>
            }

            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Books", new { page = i })">@i</a>
                </li>
            }

            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Books", new { page = Model.PageIndex + 1 })">Next</a>
                </li>
            }
        </ul>
    </nav>
</div>