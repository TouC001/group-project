@using SoftwareBookList.Models;
@model BookPaginatedList<Book>;

@{
    Layout = "_Layout";
}

<div class="container">
    <table class="table border border-2 border-dark">
        <thead>
            <tr>
                <th scope="col">Rank</th>
                <th scope="col">Title</th>
                <th class="text-center" scope="col">Score</th>
                <th class="text-center" scope="col">Your Score</th>
                <th class="text-center" scope="col">Your Status</th>
            </tr>
        </thead>
        <tbody>
            @*@foreach (var book in Model.Books)*@
            @for(int i = 0; i < Model.Books.Count(); i++)
            {
                var book = Model.Books.ToList()[i];
                <tr>
                    <td>@(i + 1 + (Model.PageSize * (Model.CurrentPage - 1)))</td>
                    <td>
                        <a href="@Url.Action("BookDetails", new { googleID = book.GoogleID })">
                            <img width="80" src="@book.Thumbnail" alt="Thumbnail" />
                            @book.Title
                        </a>
                    </td>
                    <td class="text-center">Score Here</td>
                    <td class="text-center">User's Score Here</td>
                    <td class="text-center">
                        @* Checking if User is Logged in, if not, take them to the login view. *@
                        @if (!User.Identity.IsAuthenticated)
                        {
                            <a href="@Url.Action("Login", "Account", new { ReturnUrl = Url.Action("Books", "Books") })" class="btn btn-primary text-nowrap">Login To Add Books</a>
                        }
                        else
                        {
                            // Here we are retrieving the bookAlreadyAddedMap from the ViewData and checking if the current book is bookAlreadyAddedMap added. (Also casting it)
                            Dictionary<int, bool> bookAlreadyAddedMap = ViewData["BookAlreadyAddedMap"] as Dictionary<int, bool>;

                            int bookID = book.BookID;

                            // Check if the bookID exists as a key in the bookAlreadyAddedMap dictionary.
                            bool isBookAlreadyAdded = bookAlreadyAddedMap.ContainsKey(bookID) ?

                            // If it exists as a key, retrieve its corresponding value (true or false).
                            bookAlreadyAddedMap[bookID] :

                            // If the bookID is not found in the dictionary, assume it's not already added (false).
                            false;

                            // bool isBookAlreadyAdded = bookAlreadyAddedMap.ContainsKey(bookID) ? bookAlreadyAddedMap[bookID] : false; (Would all be on one line but I broke it up.)

                            if (isBookAlreadyAdded)
                            {
                                <div class="alert alert-info p-2">Added</div>
                            }
                            else
                            {
                                <button type="button" class="btn btn-primary text-nowrap" data-toggle="modal" data-target="#addBookModal-@book.BookID">Add Book</button>
                            }

                        }
                    </td>
                </tr>
                <div class="modal fade" id="addBookModal-@book.BookID" tabindex="-1" role="dialog" aria-labelledby="addBookModalLabel">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">

                                <h5 class="modal-title" id="addBookModalLabel">Add Book</h5>

                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>

                            </div>

                            <form method="post" action="@Url.Action("AddBook", "Books", new {bookID = book.BookID})">
                                <div class="modal-body">
                                    <div class="form-group pb-1">
                                        <label for="bookTitle">Book Title</label>
                                        <input type="text" class="form-control" id="bookTitle" placeholder="@book.Title" readonly>
                                    </div>
                                    <div class="form-group py-3">
                                        <label for="status">Status</label>
                                        <select class="form-control" name="StatusID" id="statusDropdown" required>
                                            <option value="1">Read</option>
                                            <option value="2">Currently Reading</option>
                                            <option value="3">Plan to Read</option>
                                        </select>
                                    </div>
                                    <div class="form-group pt-1">
                                        <label for="rating">Personal Rating</label>
                                        <input type="number" class="form-control" name="RatingValue" id="ratingInput" min="1" max="10" required>
                                        <small class="form-text text-muted">Enter a value between 1-10</small>
                                    </div>
                                </div>
                                <div class="modal-footer">

                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

                                    <button type="submit" class="btn btn-primary">Add Book</button>

                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            }
        </tbody>
    </table>
    <nav aria-label="Page navigation">
        <ul class="pagination">
            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Books", new { page = Model.PageIndex - 1 })">Previous</a>
                </li>
            }

            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Books", new { page = i })">@i</a>
                </li>
            }

            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Books", new { page = Model.PageIndex + 1 })">Next</a>
                </li>
            }
        </ul>
    </nav>
</div>